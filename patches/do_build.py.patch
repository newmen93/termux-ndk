--- a/llvm_android/do_build.py	2021-09-15 06:00:46.505860510 +0800
+++ b/llvm_android/do_build.py	2021-09-15 10:08:09.098866261 +0800
@@ -124,7 +124,7 @@
     builders.CompilerRTBuilder().build()
     # 32-bit host crts are not needed for Darwin
     if hosts.build_host().is_linux:
-        builders.CompilerRTHostI386Builder().build()
+        builders.CompilerRTHostAArch64Builder().build()
     builders.LibOMPBuilder().build()
     if build_lldb_server:
         builders.LldbServerBuilder().build()
@@ -248,7 +248,7 @@
         'openmp',
         'clang',
         'clang-tools-extra',
-        'lld',
+        'lld'
     )
 
     # Get generic MODULE_LICENSE_* files from our android subdirectory.
@@ -479,7 +479,7 @@
                             'ld64.lld\n'
                             'ld.lld\n'
                             f'../lib64/clang/{version.long_version()}/share\n'
-                            f'../lib64/clang/{version.long_version()}/lib/linux\n'
+                            f'../lib64/clang/{version.long_version()}/lib/android\n'
                             f'../lib64/clang/{version.long_version()}/include\n'
                             f'../lib64/libxml2.so.{builders.LibXml2Builder.lib_version}\n'
                            )
@@ -660,7 +660,13 @@
     stage1.build_android_targets = args.debug or instrumented
     stage1.build()
     set_default_toolchain(stage1.installed_toolchain)
-
+    
+    prebuilt_toolchain: toolchains.Toolchain = toolchains.get_prebuilt_toolchain()    
+    # copy aarch64-linux-android28-clang to stage1-install/bin
+    shutil.copy2(prebuilt_toolchain.cc, stage1.install_dir / 'bin')
+    # copy aarch64-linux-android28-clang++ to stage1-install/bin
+    shutil.copy2(prebuilt_toolchain.cxx, stage1.install_dir / 'bin')
+    
     if build_lldb:
         # Swig is needed for both host and windows lldb.
         swig_builder = builders.SwigBuilder()
@@ -673,7 +679,7 @@
             profdata = extract_profdata()
         else:
             profdata = None
-
+        
         stage2 = builders.Stage2Builder()
         stage2.build_name = args.build_name
         stage2.svn_revision = android_version.get_svn_revision()
@@ -714,10 +720,15 @@
         stage2.build_tags = stage2_tags
 
         stage2.build()
+        
         if not (stage2.build_instrumented or stage2.debug_build):
             set_default_toolchain(stage2.installed_toolchain)
-
         Builder.output_toolchain = stage2.installed_toolchain
+        # copy aarch64-linux-android28-clang to stage2-install/bin
+        shutil.copy2(prebuilt_toolchain.cc, stage2.install_dir / 'bin')
+        # copy aarch64-linux-android28-clang++ to stage2-install/bin
+        shutil.copy2(prebuilt_toolchain.cxx, stage2.install_dir / 'bin')
+        
         if hosts.build_host().is_linux and do_runtimes:
             build_runtimes(build_lldb_server=build_lldb)
 
